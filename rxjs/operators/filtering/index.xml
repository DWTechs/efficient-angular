<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Filtering on Efficient-angular</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/</link><description>Recent content in Filtering on Efficient-angular</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/index.xml" rel="self" type="application/rss+xml"/><item><title>Debounce</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/debounce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/debounce/</guid><description>Previous : Operators
Debounce Emits a notification from the source Observable only after a particular time span determined by another Observable has passed without another source emission.
Syntax debounce&amp;lt;T&amp;gt;(durationSelector: (value: T) =&amp;gt; ObservableInput&amp;lt;any&amp;gt;): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description durationSelector A function that receives a value from the source Observable, for computing the timeout duration for each source value, returned as an Observable or a Promise. Returns MonoTypeOperatorFunction: A function that returns an Observable that delays the emissions of the source Observable by the specified duration Observable returned by durationSelector, and may drop some values if they occur too frequently.</description></item><item><title>DebounceTime</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/debounce-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/debounce-time/</guid><description>Previous : Operators
DebounceTime Emits a notification from the source Observable only after a particular time span has passed without another source emission.
Syntax debounceTime&amp;lt;T&amp;gt;(dueTime: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description dueTime The timeout duration in milliseconds (or the time unit determined internally by the optional scheduler) for the window of time required to wait for emission silence before emitting the most recent source value. scheduler optional Default is asyncScheduler.</description></item><item><title>Distinct</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct/</guid><description>Previous : Operators
Distinct Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
Syntax distinct(keySelector?, flushes?): Observable Parameters Description keySelector Optional Default is undefined. Function to select which value you want to check as distinct. flushes Optional Default is undefined. Observable for flushing the internal HashSet of the operator. Returns MonoTypeOperatorFunction: A function that returns an Observable that emits items from the source Observable with distinct values.</description></item><item><title>DistinctUntilChanged</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct-until-changed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct-until-changed/</guid><description>Previous : Operators
DistinctUntilChanged Only emit when the current value is different than the last.
Syntax distinctUntilChanged&amp;lt;T, K&amp;gt;(comparator?: (previous: K, current: K) =&amp;gt; boolean, keySelector: (value: T) =&amp;gt; K = identity as (value: T) =&amp;gt; K): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Returns MonoTypeOperatorFunction: A function that returns an Observable that emits items from the source Observable with distinct values based on the key specified.
Parameters Description comparator Optional Default is undefined. The operator takes an optional comparison function that will be called to test if an item is distinct from the previous item.</description></item><item><title>DistinctUntilKeyChanged</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct-until-key-changed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct-until-key-changed/</guid><description>Previous : Operators
DistinctUntilKeyChanged Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item, using a property accessed by using the key provided to check if the two items are distinct.
Syntax distinctUntilKeyChanged&amp;lt;T, K extends keyof T&amp;gt;(key: K, compare?: (x: T[K], y: T[K]) =&amp;gt; boolean): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description key String key for object property lookup on each item. defaultValue Optional Default is undefined.</description></item><item><title>Filter</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/filter/</guid><description>Previous : Operators
Filter Filter items emitted by the source Observable by only emitting those that satisfy a specified predicate.
Syntax filter&amp;lt;T&amp;gt;(predicate: (value: T, index: number) =&amp;gt; boolean, thisArg?: any): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description predicate A function that evaluates each value emitted by the source Observable. If it returns true, the value is emitted, if false the value is not passed to the output Observable. The index parameter is the number i for the i-th source emission that has happened since the subscription, starting from the number 0.</description></item><item><title>First</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/first/</guid><description>Previous : Operators
First Emits only the first value (or the first value that meets some condition) emitted by the source Observable.
Syntax first&amp;lt;T, D&amp;gt;(predicate?: (value: T, index: number, source: Observable&amp;lt;T&amp;gt;) =&amp;gt; boolean, defaultValue?: D): OperatorFunction&amp;lt;T, T | D&amp;gt; Parameters Description predicate Optional condition to match defaultValue Optional value to emit if no value matches the condition Emits the first value if no predicate is present Emits the first matching value if the predicate is present Closes the stream after emitting a value If the source completes before emitting any matching value, then it raises the error notification.</description></item><item><title>TakeLast</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-last/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-last/</guid><description>Previous : Operators
TakeLast Waits for the source to complete, then emits the last N values from the source, as specified by the count argument.
Syntax takeLast&amp;lt;T&amp;gt;(count: number): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description count The maximum number of values to emit from the end of the sequence of values emitted by the source Observable. Returns MonoTypeOperatorFunction: A function that returns an Observable that emits at most the last count values emitted by the source Observable.</description></item><item><title>TakeUntil</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-until/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-until/</guid><description>Previous : Operators
TakeUntil Emits the values emitted by the source Observable until a notifier Observable emits a value.
Syntax takeUntil&amp;lt;T&amp;gt;(notifier: ObservableInput&amp;lt;any&amp;gt;): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description notifier The Observable whose first emitted value will cause the output Observable of takeUntil to stop emitting values from the source Observable. Returns MonoTypeOperatorFunction: A function that returns an Observable that emits the values from the source Observable until notifier emits its first value.
Example Tick every second until the first click happens</description></item><item><title>TakeWhile</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-while/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-while/</guid><description>Previous : Operators
TakeWhile Emits values emitted by the source Observable so long as each value satisfies the given predicate, and then completes as soon as this predicate is not satisfied.
Syntax takeWhile&amp;lt;T&amp;gt;(predicate: (value: T, index: number) =&amp;gt; boolean, inclusive: boolean = false): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description predicate A function that evaluates a value emitted by the source Observable and returns a boolean. Also takes the (zero-based) index as the second argument.</description></item></channel></rss>