<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Efficient Angular on Efficient-angular</title><link>https://dwtechs.github.io/efficient-angular/</link><description>Recent content in Efficient Angular on Efficient-angular</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dwtechs.github.io/efficient-angular/index.xml" rel="self" type="application/rss+xml"/><item><title>*ngClass</title><link>https://dwtechs.github.io/efficient-angular/directives/ngClass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/directives/ngClass/</guid><description>Allows you to add and remove CSS classes on an HTML element.
Example JavaScript
let isValid = false; let step = &amp;#39;step2&amp;#39;; let index = 1; HTML
&amp;lt;div [ngClass]=&amp;#34;{&amp;#39;my_class1&amp;#39;: step === &amp;#39;step1&amp;#39;, &amp;#39;my_class2 my_class3&amp;#39; : step === &amp;#39;step2&amp;#39; }&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- step === &amp;#39;step1&amp;#39; -&amp;gt; my_class1 ; step === &amp;#39;step2&amp;#39; -&amp;gt; my_class2 my_class3 --&amp;gt; &amp;lt;div [ngClass]=&amp;#34;{1 : &amp;#39;my_class1&amp;#39;, 2 : &amp;#39;my_class2&amp;#39;, 3 : &amp;#39;my_class3&amp;#39;}[index]&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- index === 1 -&amp;gt; my_class1 ; index === 2 -&amp;gt; my_class2 index === 3 -&amp;gt; my_class3 --&amp;gt; &amp;lt;div [ngClass]=&amp;#34;isValid ?</description></item><item><title>*ngFor</title><link>https://dwtechs.github.io/efficient-angular/directives/ngFor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/directives/ngFor/</guid><description>The structural directive ngFor allows you to loop over an array and inject the elements into the DOM.
It is possible to retrieve other information such as the index of the element:
index : position of the element. odd : indicates if the element is at an odd position. even : indicates if the element is at an even position. first : indicates if the element is at the first position.</description></item><item><title>*ngIf</title><link>https://dwtechs.github.io/efficient-angular/directives/ngIf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/directives/ngIf/</guid><description>This directive allows you to hide an element according to the associated expression.. It removes or adds the element in the DOM.
Note: This directive adds or removes the element inside the DOM. If you just want to hide it, without removing it, use the CSS :
display:none means that the tag in question will not appear on the page at all (although you can still interact with it through the dom).</description></item><item><title>*ngStyle</title><link>https://dwtechs.github.io/efficient-angular/directives/ngStyle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/directives/ngStyle/</guid><description>The NgStyle directive lets you set a given DOM elements style properties.
Example JavaScript
let stickerCompareData = false; let item: any = { color: &amp;#39;#000091&amp;#39;, text: &amp;#39;text&amp;#39;, label: &amp;#39;label&amp;#39; } HTML
&amp;lt;div (click)=&amp;#34;setFullscreen()&amp;#34; [ngStyle]=&amp;#34;{&amp;#39;margin-left&amp;#39;:fullscreen ? &amp;#39;auto&amp;#39; : &amp;#39;24px&amp;#39; }&amp;#34;&amp;gt; &amp;lt;!-- fullscreen = true -&amp;gt; margin-left: auto ; fullscreen = false -&amp;gt; margin-left: 24px --&amp;gt; &amp;lt;div class=&amp;#34;square&amp;#34; [ngStyle]=&amp;#34;{&amp;#39;background-color&amp;#39;:item.color}&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!-- background-color: #000091 --&amp;gt; &amp;lt;div [ngStyle]=&amp;#34;stickerCompareData ? {&amp;#39;width&amp;#39;: &amp;#39;48%&amp;#39;} : {&amp;#39;width&amp;#39;: &amp;#39;100%&amp;#39;}&amp;#34;&amp;gt; &amp;lt;!</description></item><item><title>Actions</title><link>https://dwtechs.github.io/efficient-angular/ngrx/Store/actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ngrx/Store/actions/</guid><description>Actions are one of the main building blocks in NgRx. Actions express unique events that happen throughout your application. From user interaction with the page, external interaction through network requests, and direct interaction with device APIs, these and more events are described with actions.
Actions are the inputs and outputs of many systems in NgRx. Actions help you to understand how events are handled in your application.
The Action interface An Action in NgRx is made up of a simple interface:</description></item><item><title>Angular</title><link>https://dwtechs.github.io/efficient-angular/rxjs/angular/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/angular/</guid><description>Angular makes use of observables as an interface to handle a variety of common asynchronous operations.
HTTP Angular’s HttpClient returns observables from HTTP method calls. For instance, http.get(‘/api’) returns an observable. This provides several advantages over promise-based HTTP APIs:
Observables do not mutate the server response (as can occur through chained .then() calls on promises). Instead, you can use a series of operators to transform values as needed. HTTP requests are cancellable through the unsubscribe() method.</description></item><item><title>Basics</title><link>https://dwtechs.github.io/efficient-angular/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/basics/</guid><description>Learn Typescript All the Angular code snippets you will find online are written in Typescript. It is important that developers master it and always type the variables and objects they are working with.
Use Typescript heritage If a functionality related to a view is used on several screens, you can create a base component that contains its common functionality. The other components will be able to &amp;ldquo;extend&amp;rdquo; this base component.</description></item><item><title>Basics</title><link>https://dwtechs.github.io/efficient-angular/ngrx/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ngrx/basics/</guid><description>@ngrx/store Store is RxJS powered global state management for Angular applications, inspired by Redux. Store is a controlled state container designed to help write performant, consistent applications on top of Angular.
Key concepts Actions describe unique events that are dispatched from components and services. State changes are handled by pure functions called reducers that take the current state and the latest action to compute a new state. Selectors are pure functions used to select, derive and compose pieces of state.</description></item><item><title>Best Practices</title><link>https://dwtechs.github.io/efficient-angular/best-practices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/best-practices/</guid><description>Structure and naming Structure your application in order to :
Locate code quickly. Locating the code must be intuitive and fast. This is really important when someone else will have to work on the application. Identify code at a glance. Name the file such that you instantly know what it contains and represents. Prefer long and descriptive names over abbreviations that makes no sense. Keep the flattest structure you can.</description></item><item><title>Build</title><link>https://dwtechs.github.io/efficient-angular/build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/build/</guid><description>Build the application Environment files The files describing each environment are stored in the directory :
src\environments For each environment, it is necessary to create a new file with the following format environment.XXXXX.ts. We will find inside all the constants necessary to use Angular on the different environments such as: DB, URL of the site,&amp;hellip;
Configuration : the configuration of the application is defined in angular.json where we will find all the definitions of the environments.</description></item><item><title>Change Detection Strategy</title><link>https://dwtechs.github.io/efficient-angular/change-detection-strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/change-detection-strategy/</guid><description>What is Change Detection Angular framework needs to replicate the state of our application on the UI by combining the state and the template:
Whenever a change happens in the state, the view needs to be updated. This action of syncing the HTML with the state data is called Change Detection.
Most of the time, we do not need to care about this mechanism, until we need to optimize the performance of our application.</description></item><item><title>CLI</title><link>https://dwtechs.github.io/efficient-angular/cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/cli/</guid><description>Angular CLI : Useful commands Create a feature module: Execute the command:
ng generate module {module-name} Shorter command:
ng g m {module-name} For example, you can create an AuthenticationModule like this:
ng generate module authentication To automatically create a routing module with your new module, you can add --routing=true:
ng g m {module-name} --routing=true Create a component Execute the command:
ng generate component {module-directory-name}/{component-name} Shorter command:
ng g c {module-directory-name}/{component-name} For example, you can create a LoginComponent like this:</description></item><item><title>CombineLatest</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/join-creation/combine-latest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/join-creation/combine-latest/</guid><description>Combines multiple Observables to create an Observable whose values are calculated from the latest values of each of its input Observables.
Syntax combineLatest&amp;lt;O extends ObservableInput&amp;lt;any&amp;gt;, R&amp;gt;(...args: any[]): Observable&amp;lt;R&amp;gt; | Observable&amp;lt;ObservedValueOf&amp;lt;O&amp;gt;[]&amp;gt; Parameters Description args Type: any[]. Returns Observable | Observable&amp;lt;ObservedValueOf[]&amp;gt;: An Observable of projected values from the most recent values from each input Observable, or an array of the most recent values from each input Observable.
Example Combine a dictionary of Observables</description></item><item><title>combineLatestAll</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/Join/combine-latest-all/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/Join/combine-latest-all/</guid><description>Flattens an Observable-of-Observables by applying combineLatest when the Observable-of-Observables completes.
Syntax combineLatestAll&amp;lt;R&amp;gt;(project?: (...values: any[]) =&amp;gt; R) Parameters Description project Optional Default is undefined. Function to map the most recent values from each inner Observable into a new result. Takes each of the most recent values from each collected inner Observable as arguments, in order. Example Map two click events to a finite interval Observable, then apply combineLatestAll
import { fromEvent, interval } from &amp;#39;rxjs&amp;#39;; import { map, combineLatestAll, take } from &amp;#39;rxjs/operators&amp;#39;; const clicks = fromEvent(document, &amp;#39;click&amp;#39;); const higherOrder = clicks.</description></item><item><title>CombineLatestWith</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/Join/combine-latest-with/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/Join/combine-latest-with/</guid><description>Create an observable that combines the latest values from all passed observables and the source into arrays and emits them.
Syntax combineLatestWith&amp;lt;T, A extends readonly unknown[]&amp;gt;(...otherSources: any[]): OperatorFunction&amp;lt;T, Cons&amp;lt;T, A&amp;gt;&amp;gt; Parameters Description otherSources the other sources to subscribe to. Returns OperatorFunction&amp;lt;T, Cons&amp;lt;T, A&amp;raquo;: A function that returns an Observable that emits the latest emissions from both source and provided Observables.
Example Simple calculation from two inputs.
// Setup: Add two inputs to the page const input1 = document.</description></item><item><title>Common operators and how to use them</title><link>https://dwtechs.github.io/efficient-angular/rxjs/common-use-cases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/common-use-cases/</guid><description>Table of contents Transformation map switchMap Filtering filter distinctUntilChanged takeUntil Combination combineLatest pairwise Utility tap Transformation map The map operator is a Transformation Operator. It takes values from one Observable, transforms them, and creates a new Observable that emits the transformed values.
With map, you can perform simple transformations to the values emitted by an Observable.
Let&amp;rsquo;s take a look at a common example in Angular: we get a backend response, and want to extract a property from it.</description></item><item><title>Component lifecycle</title><link>https://dwtechs.github.io/efficient-angular/component-lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/component-lifecycle/</guid><description>A component instance has a lifecycle that starts when Angular instantiates the component class and renders the component view along with its child views. The lifecycle continues with change detection, as Angular checks to see when data-bound properties change, and updates both the view and the component instance as needed.
For controlling the components within Angular, the developers can use the hook events at different phases of the application. Eight types of lifecycle hook events are present which the developers can use in any of the components of the angular.</description></item><item><title>Concat</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/join-creation/concat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/join-creation/concat/</guid><description>Creates an output Observable which sequentially emits all values from the first given Observable and then moves on to the next.
Syntax concat(...args: any[]): Observable&amp;lt;unknown&amp;gt; Parameters Description otherSources Other observable sources to subscribe to, in sequence, after the original source is complete. Returns Observable Observable which sequentially emits all values from the first given Observable and then moves on to the next.
Example Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</description></item><item><title>ConcatWith</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/Join/concat-with/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/Join/concat-with/</guid><description>Emits all of the values from the source observable, then, once it completes, subscribes to each observable source provided, one at a time, emitting all of their values, and not subscribing to the next one until it completes.
Syntax concatWith&amp;lt;T, A extends readonly unknown[]&amp;gt;(...otherSources: any[]): OperatorFunction&amp;lt;T, T | A[number]&amp;gt; Parameters Description otherSources Other observable sources to subscribe to, in sequence, after the original source is complete. Returns A function that returns an Observable that concatenates subscriptions to the source and provided Observables subscribing to the next only once the current subscription completes.</description></item><item><title>Debounce</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/debounce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/debounce/</guid><description>Emits a notification from the source Observable only after a particular time span determined by another Observable has passed without another source emission.
Syntax debounce&amp;lt;T&amp;gt;(durationSelector: (value: T) =&amp;gt; ObservableInput&amp;lt;any&amp;gt;): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description durationSelector A function that receives a value from the source Observable, for computing the timeout duration for each source value, returned as an Observable or a Promise. Returns MonoTypeOperatorFunction: A function that returns an Observable that delays the emissions of the source Observable by the specified duration Observable returned by durationSelector, and may drop some values if they occur too frequently.</description></item><item><title>DebounceTime</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/debounce-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/debounce-time/</guid><description>Emits a notification from the source Observable only after a particular time span has passed without another source emission.
Syntax debounceTime&amp;lt;T&amp;gt;(dueTime: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description dueTime The timeout duration in milliseconds (or the time unit determined internally by the optional scheduler) for the window of time required to wait for emission silence before emitting the most recent source value. scheduler optional Default is asyncScheduler. The SchedulerLike to use for managing the timers that handle the timeout for each value.</description></item><item><title>Definition</title><link>https://dwtechs.github.io/efficient-angular/ngrx/Store/definition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ngrx/Store/definition/</guid><description>Store is RxJS powered global state management for Angular applications, inspired by Redux. Store is a controlled state container designed to help write performant, consistent applications on top of Angular.
Key concepts Actions describe unique events that are dispatched from components and services. State changes are handled by pure functions called reducers that take the current state and the latest action to compute a new state. Selectors are pure functions used to select, derive and compose pieces of state.</description></item><item><title>Delay</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/utility/delay/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/utility/delay/</guid><description>Delays the emission of items from the source Observable by a given timeout or until a given Date.
Syntax delay&amp;lt;T&amp;gt;(due: number | Date, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description due The delay duration in milliseconds (a number) or a Date until which the emission of the source items is delayed. scheduler Optional Default is asyncScheduler. The SchedulerLike to use for managing the timers that handle the time-shift for each item.</description></item><item><title>Distinct</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct/</guid><description>Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
Syntax distinct(keySelector?, flushes?): Observable Parameters Description keySelector Optional Default is undefined. Function to select which value you want to check as distinct. flushes Optional Default is undefined. Observable for flushing the internal HashSet of the operator. Returns MonoTypeOperatorFunction: A function that returns an Observable that emits items from the source Observable with distinct values.</description></item><item><title>DistinctUntilChanged</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct-until-changed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct-until-changed/</guid><description>Only emit when the current value is different than the last.
Syntax distinctUntilChanged&amp;lt;T, K&amp;gt;(comparator?: (previous: K, current: K) =&amp;gt; boolean, keySelector: (value: T) =&amp;gt; K = identity as (value: T) =&amp;gt; K): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Returns MonoTypeOperatorFunction: A function that returns an Observable that emits items from the source Observable with distinct values based on the key specified.
Parameters Description comparator Optional Default is undefined. The operator takes an optional comparison function that will be called to test if an item is distinct from the previous item.</description></item><item><title>DistinctUntilKeyChanged</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct-until-key-changed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/distinct-until-key-changed/</guid><description>Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item, using a property accessed by using the key provided to check if the two items are distinct.
Syntax distinctUntilKeyChanged&amp;lt;T, K extends keyof T&amp;gt;(key: K, compare?: (x: T[K], y: T[K]) =&amp;gt; boolean): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description key String key for object property lookup on each item. defaultValue Optional Default is undefined. Comparison function called to test if an item is distinct from the previous item in the source.</description></item><item><title>ECMAScript</title><link>https://dwtechs.github.io/efficient-angular/ECMAScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ECMAScript/</guid><description>ECMAScript Documentation sources :
w3schools
Best Practices All the advices applied on Javascript can be transferred to other languages.
Variable naming conventions All names start with a letter. The name must begin with a letter, a dollar sign $ or an underscore _. It must not begin with a number. We use camelCase for identifier names The name may contain letters, numbers, a dollar sign $ or an underscore _.</description></item><item><title>Error handling</title><link>https://dwtechs.github.io/efficient-angular/rxjs/error-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/error-handling/</guid><description>You handle errors by specifying an error callback on the observer. Producing an error also causes the observable to clean up subscriptions and stop producing values.
myObservable.subscribe({ next(num) { console.log(&amp;#39;Next num: &amp;#39; + num)}, error(err) { console.log(&amp;#39;Received an error: &amp;#39; + err)} }); RxJS provides the catchError operator that lets you handle known errors in the observable recipe. For example, when an error is generated, if you detect this error and provide a default value, your flow continues to process the values.</description></item><item><title>Filter</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/filter/</guid><description>Filter items emitted by the source Observable by only emitting those that satisfy a specified predicate.
Syntax filter&amp;lt;T&amp;gt;(predicate: (value: T, index: number) =&amp;gt; boolean, thisArg?: any): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description predicate A function that evaluates each value emitted by the source Observable. If it returns true, the value is emitted, if false the value is not passed to the output Observable. The index parameter is the number i for the i-th source emission that has happened since the subscription, starting from the number 0.</description></item><item><title>First</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/first/</guid><description>Emits only the first value (or the first value that meets some condition) emitted by the source Observable.
Syntax first&amp;lt;T, D&amp;gt;(predicate?: (value: T, index: number, source: Observable&amp;lt;T&amp;gt;) =&amp;gt; boolean, defaultValue?: D): OperatorFunction&amp;lt;T, T | D&amp;gt; Parameters Description predicate Optional condition to match defaultValue Optional value to emit if no value matches the condition Emits the first value if no predicate is present Emits the first matching value if the predicate is present Closes the stream after emitting a value If the source completes before emitting any matching value, then it raises the error notification.</description></item><item><title>From</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/creation/from/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/creation/from/</guid><description>Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.
Syntax from&amp;lt;T&amp;gt;(input: ObservableInput&amp;lt;T&amp;gt;, scheduler?: SchedulerLike): Observable&amp;lt;T&amp;gt; Parameters Description input Type: ObservableInput. scheduler Optional Default is undefined. Type: SchedulerLike. Returns Observable:
Example Converts an array to an Observable
import { from } from &amp;#39;rxjs&amp;#39;; const array = [10, 20, 30]; const result = from(array); result.subscribe(x =&amp;gt; console.log(x)); // Logs: // 10 // 20 // 30</description></item><item><title>FromEvent</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/creation/from-event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/creation/from-event/</guid><description>Creates an Observable that emits events of a specific type coming from the given event target.
Syntax fromEvent&amp;lt;T&amp;gt;(target: any, eventName: string, options?: EventListenerOptions | ((...args: any[]) =&amp;gt; T), resultSelector?: (...args: any[]) =&amp;gt; T): Observable&amp;lt;T&amp;gt; Parameters Description target The DOM EventTarget, Node.js EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to. eventName The event name of interest, being emitted by the target. options optional Default is undefined. Options to pass through to addEventListener resultSelector optional Default is undefined.</description></item><item><title>HttpClient</title><link>https://dwtechs.github.io/efficient-angular/api/http-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/api/http-client/</guid><description>HttpClient is used to make HTTP requests, like GET | POST | PUT | DELETE to back end server.
Setup for server communication Start by importing the HttpClientModule module from the @angular/common/http package:
import { HttpClientModule } from &amp;#39;@angular/common/http&amp;#39;; Next, add the HttpClientModule to the imports array of the AppModule:
@NgModule({ imports: [ ... HttpClientModule, ... ], ... }) export class AppModule { } Methods GET HttpClient.get() constructs an observable that, when subscribed, causes the configured PUT request to execute on the server.</description></item><item><title>Install</title><link>https://dwtechs.github.io/efficient-angular/ngrx/effects/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ngrx/effects/install/</guid><description/></item><item><title>Installation</title><link>https://dwtechs.github.io/efficient-angular/ngrx/Store/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ngrx/Store/install/</guid><description>Installing with npm npm install @ngrx/store --save Installing with yarn yarn add @ngrx/store Installing with ng add If your project is using the Angular CLI 6+ then you can install the Store to your project with the following ng add command :
ng add @ngrx/store@latest Optional ng add flags path - path to the module that you wish to add the import for the StoreModule to. project - name of the project defined in your angular.</description></item><item><title>Interceptors</title><link>https://dwtechs.github.io/efficient-angular/api/interceptors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/api/interceptors/</guid><description>Interceptors are used in Angular to intercept and handle an HttpRequest and HttpResponse.
To add some specific headers or params in our request or say modify my HttpRequest or HttpResponse, rather than handling it separately for each of my requests angular generally provides us interceptors. They are written once and intercepted by all our requests and response using the HttpClient.
By intercepting the HTTP request, we can modify or change the value of the request.</description></item><item><title>Map</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/transformation/map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/transformation/map/</guid><description>Applies a given project function to each value emitted by the source Observable, and emits the resulting values as an Observable.
Syntax map&amp;lt;T, R&amp;gt;(project: (value: T, index: number) =&amp;gt; R, thisArg?: any): OperatorFunction&amp;lt;T, R&amp;gt; Parameters Description project The function to apply to each value emitted by the source Observable. The index parameter is the number i for the i-th emission that has happened since the subscription, starting from the number 0.</description></item><item><title>Modules</title><link>https://dwtechs.github.io/efficient-angular/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/modules/</guid><description>NgModules are a great way to organize an application and keep code related to a specific functionality or feature separate from other code. Use NgModules to consolidate components, directives, and pipes into cohesive blocks of functionality.
Modules are a great way to organize an application and extend it with capabilities from external libraries.
An NgModule is a class marked by the @NgModule decorator. @NgModule takes a metadata object that describes how to compile a component&amp;rsquo;s template and how to create an injector at runtime.</description></item><item><title>Observables</title><link>https://dwtechs.github.io/efficient-angular/rxjs/observables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/observables/</guid><description>An observable is lazy Push collections of multiple values. It can be compared to other concepts like this :
SINGLE MULTIPLE Pull Function Iterator Push Promise Observable Observables can return multiple values over time.
Pull versus Push Pull and Push are two different protocols that describe how a data Producer can communicate with a data Consumer.
In Pull systems, the Consumer determines when it receives data from the data Producer. The Producer itself is unaware of when the data will be delivered to the Consumer.</description></item><item><title>Observer</title><link>https://dwtechs.github.io/efficient-angular/rxjs/observer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/observer/</guid><description>A consumer of values delivered by an Observable. Observers are simply a set of callbacks, one for each type of notification delivered by the Observable: next, error, and complete. The following is an example of a typical Observer object:
const observer = { next: x =&amp;gt; console.log(&amp;#39;Observer got a next value: &amp;#39; + x), error: err =&amp;gt; console.error(&amp;#39;Observer got an error: &amp;#39; + err), complete: () =&amp;gt; console.log(&amp;#39;Observer got a complete notification&amp;#39;), }; To use the Observer, provide it to the subscribe of an Observable:</description></item><item><title>Of</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/creation/of/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/creation/of/</guid><description>Converts the arguments to an observable sequence.
Syntax of&amp;lt;T&amp;gt;(...args: (SchedulerLike | T)[]): Observable&amp;lt;T&amp;gt; Parameters Description args Type: `(SchedulerLike Returns Observable: An Observable that emits the arguments described above and then completes.
Example Emit the values 10, 20, 30
import { of } from &amp;#39;rxjs&amp;#39;; of(10, 20, 30) .subscribe( next =&amp;gt; console.log(&amp;#39;next:&amp;#39;, next), err =&amp;gt; console.log(&amp;#39;error:&amp;#39;, err), () =&amp;gt; console.log(&amp;#39;the end&amp;#39;), ); // Outputs // next: 10 // next: 20 // next: 30 // the end</description></item><item><title>Overview</title><link>https://dwtechs.github.io/efficient-angular/ngrx/effects/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ngrx/effects/overview/</guid><description/></item><item><title>Overview</title><link>https://dwtechs.github.io/efficient-angular/rxjs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/overview/</guid><description>You will mainly use observables to allow asynchronous transmission of messages between parts of your application. In Angular you will use them via RxJS.
The essential concepts to solve async event management are:
Observable: a function that can return several values over time. an invokable collection of future values or events. a lazy Push collections of multiple values. Observer: a collection of callbacks that knows how to listen to values delivered by the Observable.</description></item><item><title>Reducer</title><link>https://dwtechs.github.io/efficient-angular/ngrx/Store/reducer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ngrx/Store/reducer/</guid><description/></item><item><title>Reducers</title><link>https://dwtechs.github.io/efficient-angular/ngrx/reducers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ngrx/reducers/</guid><description/></item><item><title>Routing</title><link>https://dwtechs.github.io/efficient-angular/routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/routing/</guid><description>The Angular Router is an optional service that presents a particular component view for a given URL. It isn&amp;rsquo;t part of the Angular core and thus is in its own library package, @angular/router.
import { RouterModule, Routes } from &amp;#34;@angular/router&amp;#34;; Configuration A router has no routes until you configure it. The following example creates five route definitions, configures the router via the RouterModule.forRoot() method, and adds the result to the imports array of the AppModule'.</description></item><item><title>Selector</title><link>https://dwtechs.github.io/efficient-angular/ngrx/Store/selector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ngrx/Store/selector/</guid><description/></item><item><title>Selectors</title><link>https://dwtechs.github.io/efficient-angular/ngrx/selectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/ngrx/selectors/</guid><description/></item><item><title>Service or Store</title><link>https://dwtechs.github.io/efficient-angular/service-or-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/service-or-store/</guid><description/></item><item><title>Subjects</title><link>https://dwtechs.github.io/efficient-angular/rxjs/subjects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/subjects/</guid><description>It is the big thing of RxJS as it gives multicast abilities to observables.
It allows values to be multicasted to many Observers. While plain Observables are unicast.
Every Subject is an Observable. Given a Subject, you can subscribe to it, providing an Observer, which will start receiving values normally. From the perspective of the Observer, it cannot tell whether the Observable execution is coming from a plain unicast Observable or a Subject.</description></item><item><title>Subscription</title><link>https://dwtechs.github.io/efficient-angular/rxjs/subscription/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/subscription/</guid><description>an object that represents a disposable resource, usually the execution of an Observable. A Subscription has one important method, unsubscribe, that takes no argument and just disposes the resource held by the subscription.
import { interval } from &amp;#39;rxjs&amp;#39;; const observable = interval(1000); const subscription = observable.subscribe(x =&amp;gt; console.log(x)); // Later: // This cancels the ongoing Observable execution which // was started by calling subscribe with an Observer. subscription.unsubscribe(); Subscriptions can also be put together, so that a call to an unsubscribe() of one Subscription may unsubscribe multiple Subscriptions.</description></item><item><title>SwitchMap</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/transformation/switch-map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/transformation/switch-map/</guid><description>Projects each source value to an Observable which is merged in the output Observable, emitting values only from the most recently projected Observable.
Syntax switchMap&amp;lt;T, R, O extends ObservableInput&amp;lt;any&amp;gt;&amp;gt;(project: (value: T, index: number) =&amp;gt; O, resultSelector?: (outerValue: T, innerValue: ObservedValueOf&amp;lt;O&amp;gt;, outerIndex: number, innerIndex: number) =&amp;gt; R): OperatorFunction&amp;lt;T, ObservedValueOf&amp;lt;O&amp;gt; | R&amp;gt; Parameters Description project A function that, when applied to an item emitted by the source Observable, returns an Observable. resultSelector optional Optional.</description></item><item><title>TakeLast</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-last/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-last/</guid><description>Waits for the source to complete, then emits the last N values from the source, as specified by the count argument.
Syntax takeLast&amp;lt;T&amp;gt;(count: number): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description count The maximum number of values to emit from the end of the sequence of values emitted by the source Observable. Returns MonoTypeOperatorFunction: A function that returns an Observable that emits at most the last count values emitted by the source Observable.
Example Take the last 3 values of an Observable with many values</description></item><item><title>TakeUntil</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-until/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-until/</guid><description>Emits the values emitted by the source Observable until a notifier Observable emits a value.
Syntax takeUntil&amp;lt;T&amp;gt;(notifier: ObservableInput&amp;lt;any&amp;gt;): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description notifier The Observable whose first emitted value will cause the output Observable of takeUntil to stop emitting values from the source Observable. Returns MonoTypeOperatorFunction: A function that returns an Observable that emits the values from the source Observable until notifier emits its first value.
Example Tick every second until the first click happens</description></item><item><title>TakeWhile</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-while/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/filtering/take-while/</guid><description>Emits values emitted by the source Observable so long as each value satisfies the given predicate, and then completes as soon as this predicate is not satisfied.
Syntax takeWhile&amp;lt;T&amp;gt;(predicate: (value: T, index: number) =&amp;gt; boolean, inclusive: boolean = false): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description predicate A function that evaluates a value emitted by the source Observable and returns a boolean. Also takes the (zero-based) index as the second argument. inclusive optional Default is false.</description></item><item><title>Tap</title><link>https://dwtechs.github.io/efficient-angular/rxjs/operators/utility/tap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/rxjs/operators/utility/tap/</guid><description>Used to perform side-effects for notifications from the source observable
Syntax tap&amp;lt;T&amp;gt;(observerOrNext?: Partial&amp;lt;Observer&amp;lt;T&amp;gt;&amp;gt; | ((value: T) =&amp;gt; void), error?: (e: any) =&amp;gt; void, complete?: () =&amp;gt; void): MonoTypeOperatorFunction&amp;lt;T&amp;gt; Parameters Description observerOrNext Optional Optional. Default is undefined. A next handler or partial observer. error Optional Default is undefined. An error handler complete Optional Default is undefined. A completion handler Returns MonoTypeOperatorFunction: A function that returns an Observable identical to the source, but runs the specified Observer or callback(s) for each item.</description></item><item><title>What is Angular</title><link>https://dwtechs.github.io/efficient-angular/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-angular/intro/</guid><description>Angular is an application design framework and development platform for creating efficient and sophisticated single-page apps.
It contains :
A component-based framework for building scalable web applications A collection of well-integrated libraries that cover a wide variety of features, including routing, forms management, client-server communication, and more A suite of developer tools to help you develop, build, test, and update your code</description></item></channel></rss>